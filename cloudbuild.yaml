steps:
  # Build the API image
  - name: "gcr.io/cloud-builders/docker"
    args: ["build", "--target", "prod", "-t", "${_API_IMAGE}", "./sourcecode/api"]
    id: docker-build-api
    waitFor: ['-']

  # Build the Frontend image
  - name: "gcr.io/cloud-builders/docker"
    args: ["build", "--target", "prod", "-t", "${_FRONTEND_IMAGE}", "./sourcecode/frontend"]
    id: docker-build-frontend
    waitFor: ['-']

  # Push the API image to Container Registry
  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_API_IMAGE}"]
    id: docker-push-api
    waitFor:
      - docker-build-api

  # Push the Frontend image to Container Registry
  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_FRONTEND_IMAGE}"]
    id: docker-push-frontend
    waitFor:
      - docker-build-frontend

  # Add cloud proxy to container in order to be able to run migrations
  - id: "docker-layer"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        echo "FROM $_API_IMAGE
        COPY --from=gcr.io/cloudsql-docker/gce-proxy /cloud_sql_proxy /cloudsql/cloud_sql_proxy" > Dockerfile-proxy;

        docker build -f Dockerfile-proxy -t migration-proxy .
    waitFor:
      - docker-build-api


  # Run the database migration
  # For Unix Socket connections
  - id: "migrate-socket"
    name: "migration-proxy"
    dir: /app
    env:
      - "CONFIG_DB_DATABASE=${_CONFIG_DB_DATABASE}"
      - "CONFIG_DB_USER=${_CONFIG_DB_USER}"
      - "CONFIG_DB_PASSWORD=${_CONFIG_DB_PASSWORD}"
      - "CONFIG_DB_HOST=${_CONFIG_DB_HOST}"
    entrypoint: /bin/bash
    args:
      - '-c'
      - |
        /cloudsql/cloud_sql_proxy -instances=${_INSTANCE_CONNECTION_NAME} -dir=/cloudsql & sleep 2;
        pwd;
        ls -l;
        ls -l /cloudsql;
        yarn migrate:prod;
    waitFor:
      - docker-layer

  # Deploy container image to Cloud Run
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      [
        "run",
        "deploy",
        "$_API_SERVICE_ID",
        "--image",
        "${_API_IMAGE}",
        "--region",
        "${_GCP_REGION}"
      ]
    waitFor:
      - docker-push-api

  # Deploy container image to Cloud Run
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: gcloud
    args:
      [
        "run",
        "deploy",
        "$_FRONTEND_SERVICE_ID",
        "--image",
        "${_FRONTEND_IMAGE}",
        "--region",
        "${_GCP_REGION}"
      ]
    waitFor:
      - docker-push-frontend

images:
  - gcr.io/$PROJECT_ID/mysecondbrain-api:$COMMIT_SHA
  - gcr.io/$PROJECT_ID/mysecondbrain-frontend:$COMMIT_SHA

substitutions:
  _GCP_REGION: the-region

  _API_IMAGE: gcr.io/${PROJECT_ID}/mysecondbrain-api:${COMMIT_SHA}
  _FRONTEND_IMAGE: gcr.io/${PROJECT_ID}/mysecondbrain-frontend:${COMMIT_SHA}

  _API_SERVICE_ID: id
  _FRONTEND_SERVICE_ID: id

  _CONFIG_DB_DATABASE: database
  _CONFIG_DB_USER: user
  _CONFIG_DB_PASSWORD: password
  _CONFIG_DB_HOST: host
  _INSTANCE_CONNECTION_NAME: connection_name

options:
  dynamic_substitutions: true
  logging: CLOUD_LOGGING_ONLY

timeout: 1200s